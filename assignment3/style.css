/* ====================================================================
DESIGN THEORY
Early internet maximalist content and minimalist composition
Main body content
Text box interactive
BG muisc
=======================================================================
TYPOGRAPHY
=======================================================================
COLOR PALLETE
Define all colors in root. accent is on hover color
======================================================================*/

:root {
  --bg-color: rgb(14, 15, 18);
  --text-color: rgb(217, 217, 217);
  --window-text-color: black;
  --accent-color: darkslateblue;
}

body {
  max-width: 1200px;
  background-color: var(--bg-color);
  color: var(--text-color);
  font-family: "VT323", monospace;
  font-weight: 400;
  font-style: normal;
}

main {
  display: flex;
}

/*------------------------------------------------------------------*/
/*Title and flavor text styling*/
#title-container {
  width: 220px;
  padding: 15px; /* padding is inside, margin outside*/
  background-color: var(--bg-color);
}

/* horizontal line dividing text sections*/
.line {
  width: 100%;
  height: 2px;
  background-color: var(--text-color);
  margin-top: 20px;
  margin-bottom: 20px;
}

h1 {
  font-family: "Six Caps", sans-serif;
  font-weight: 400;
  font-style: normal;
  font-size: 8rem;
  line-height: 1;
  padding-top: 10px;
  padding-bottom: 10px;
}

h2,
p {
  font-family: "Pathway Gothic One", sans-serif;
  font-weight: 400;
  font-style: normal;
  line-height: 1.3;
}

h2 {
  font-size: 1.3rem;
  padding-bottom: 8px;
}

footer p {
  font-family: "VT323", sans-serif;
}

/* Small idle shuffling animation to match the visual style */
h1,
h2,
p {
  animation: text-shuffle 0.8s infinite;
}
@keyframes text-shuffle {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(0px);
  }
  51% {
    transform: translateY(1px);
  }
  100% {
    transform: translateY(1px);
  }
}

/*----------------------------------------------------------------*/
/*Soundboard grid styling*/
#soundboard-container {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(19, 1fr);
  min-width: 600px;
  min-height: auto;
  aspect-ratio: 60 / 228;
  /*aspect ratio maintain consistent square size of grid*/

  gap: 2px;
  background-color: var(--text-color);
  /*bg-color and gap to create lines running between grid box*/
}

.box-maingrid {
  background-color: var(--bg-color);
  padding: 2px;
  position: relative;
  /*Allow content stacking inside using absolute*/
}

.box-maingrid:hover {
  background-color: var(--accent-color);
  cursor: pointer;
}

.icon {
  width: 100%;
  height: 100%;
  background-size: 100%;
  background-repeat: no-repeat;
  /* keep the GIF original size, non repeat */
}

/* Setting the background for all icons of same type */
/* All base idle animations */
.i1x1b {
  background-image: url(1x1\ black.gif);
}
.i1x1 {
  background-image: url(1x1.gif);
}
.i1x2 {
  background-image: url(1x2.gif);
}
.i1x2sw {
  background-image: url(1x2sw.gif);
}
.i1x3 {
  background-image: url(1x3.gif);
}
.i1x4 {
  background-image: url(1x4.gif);
}
.i2x3 {
  background-image: url(2x3.gif);
}
.i2x3sw {
  background-image: url(2x3sw.gif);
}
.i2x4 {
  background-image: url(2x4.gif);
}
.i3x3 {
  background-image: url(3x3.gif);
}
/* ==============================================================
ICON CLASS specific animation 

Using GIF allow the background to be transparent, however, unlike
MP4(video), GIF, as an image class, does not specify start and end point.

This means to play an animation once (e.g. animation fire on click)
I need to use a transparent PNG spritemap containing all
frames of animation, and animate manually using CSS to control its
speed, start and end. 
These animated class will be added ontop of the existing icon classes. 
Due being later in the code, the new style will be applied.

Use JS 'animationed' Event to know when animation is finished.
Similar to 'ended' Event when using video.
==================================================================*/

/* 1x1 */
.i1x1-idle {
  background-image: url(1x1idle.png);
  background-size: 1800%;
  /* set BG size to 100% times the number of frames. This makes each
  frame fill the exact size of div */
  /* The default BG size is set 100% - see above code (line-130) */
  animation: animateframe steps(17) 2250ms;
  /* Use CSS animation to slide each frame into place. Use steps to 
  jump from frame to frame (remove smooth transition). 
  steps(num) = total frames - 1 */
  /* Animation duration is calculated by taking the initial fps of anim
  (8fps for 1x1), divide by 1000 to know the ms between each frame
  Then multiply by number of frames. */
  /* Each set (1x1, 1x2, ...) has a different fps for a varied look */
  /* All variants of a set has the same fps */
}
.i1x1-var1 {
  background-image: url(1x1var1.png);
  background-size: 3900%;
  animation: animateframe steps(38) 4875ms;
}
.i1x1-var2 {
  background-image: url(1x1var2.png);
  background-size: 3500%;
  animation: animateframe steps(34) 4375ms;
}

/* 1x2 */
.i1x2-idle {
  background-image: url(1x2idle.png);
  background-size: 1500%;
  animation: animateframe steps(14) 2499ms;
}
.i1x2-var1 {
  background-image: url(1x2var1.png);
  background-size: 2900%;
  animation: animateframe steps(28) 4831ms;
}
.i1x2-var2 {
  background-image: url(1x2var2.png);
  background-size: 2900%;
  animation: animateframe steps(28) 4831ms;
}

/* 1x2sw */
.i1x2sw-idle {
  background-image: url(1x2swidle.png);
  background-size: 1500%;
  animation: animateframe steps(14) 2499;
}
.i1x2sw-var1 {
  background-image: url(1x2swvar1.png);
  background-size: 2900%;
  animation: animateframe steps(28) 4831ms;
}
.i1x2sw-var2 {
  background-image: url(1x2swvar2.png);
  background-size: 2900%;
  animation: animateframe steps(28) 4831ms;
}

/* 1x3 */
.i1x3-idle {
  background-image: url(1x3idle.png);
  background-size: 1500%;
  animation: animateframe steps(14) 2142ms;
}
.i1x3-var1 {
  background-image: url(1x3var1.png);
  background-size: 2800%;
  animation: animateframe steps(27) 3998ms;
}
.i1x3-var2 {
  background-image: url(1x3var2.png);
  background-size: 2800%;
  animation: animateframe steps(27) 3998ms;
}

/* 1x4 */
.i1x4-idle {
  background-image: url(1x4idle.png);
  background-size: 800%;
  animation: animateframe steps(7) 800ms;
}
.i1x4-var1 {
  background-image: url(1x4var1.png);
  background-size: 3000%;
  animation: animateframe steps(29) 3000ms;
}
.i1x4-var2 {
  background-image: url(1x4var2.png);
  background-size: 2900%;
  animation: animateframe steps(28) 2900ms;
}

/* 2x3 */
.i2x3-idle {
  background-image: url(2x3idle.png);
  background-size: 1200%;
  animation: animateframe steps(11) 1500ms;
}
.i2x3-var1 {
  background-image: url(2x3var1.png);
  background-size: 2700%;
  animation: animateframe steps(26) 3375ms;
}
.i2x3-var2 {
  background-image: url(2x3var2.png);
  background-size: 2700%;
  animation: animateframe steps(26) 3375ms;
}

/* 2x3sw */
.i2x3sw-idle {
  background-image: url(2x3swidle.png);
  background-size: 1200%;
  animation: animateframe steps(11) time;
}
.i2x3sw-var1 {
  background-image: url(2x3swvar1.png);
  background-size: 2700%;
  animation: animateframe steps(26) 3375ms;
}
.i2x3sw-var2 {
  background-image: url(2x3swvar2.png);
  background-size: 2700%;
  animation: animateframe steps(26) 3375ms;
}

/* 2x4 */
.i2x4-idle {
  background-image: url(2x4idle.png);
  background-size: 1400%;
  animation: animateframe steps(13) 1555ms;
}
.i2x4-var1 {
  background-image: url(2x4ivar1.png);
  background-size: 3100%;
  animation: animateframe steps(30) 3444ms;
}
.i2x4-var2 {
  background-image: url(2x4var2.png);
  background-size: 3100%;
  animation: animateframe steps(30) 3444ms;
}

/* 3x3 */
.i3x3-idle {
  background-image: url(3x3idle.png);
  background-size: 1600%;
  animation: animateframe steps(15) 1600ms;
}
.i3x3-var1 {
  background-image: url(3x3var1.png);
  background-size: 3100%;
  animation: animateframe steps(30) 3100ms;
}
.i3x3-var2 {
  background-image: url(3x3var2.png);
  background-size: 3100%;
  animation: animateframe steps(30) 3100ms;
}

@keyframes animateframe {
  0% {
    background-position: 0%;
  }
  100% {
    background-position: 100%;
  }
}

/* ------------------------------------------------------------------- */
/*Window text box styling*/
#textbox-container {
  width: 400px;
  height: 300px;
  background-image: url(window.gif);

  position: fixed;
  right: 80px;
  top: 20px;
  padding: 30px;
  padding-top: 70px;
  z-index: -1;
  /* fixed position but sit behind the main soundboard if screen
  is small. Better for when coding too */
}
#close-window-btn {
  position: fixed;
  right: 90px;
  top: 30px;
  cursor: pointer;
}

#close-icon-img {
  /* img is a transparent BG GIF, with only border visible */
  position: relative;
  z-index: 9;
}
#close-icon-bg {
  /* A CSS defined square shape, size to fit inside the icon img */
  position: fixed;
  right: 95px;
  top: 36px;
  width: 26px;
  height: 24px;
  z-index: 8;
}
/* creating a seperate div allow the bg color to turn red on hover
using CSS, while keeping the animated GIF icon */
#close-window-btn:hover #close-icon-bg {
  background-color: rgb(206, 0, 0);
}
#close-window-btn:active #close-icon-img {
  scale: 90%;
}

.text-cursor {
  font-family: "VT323", monospace;
  font-size: 1.2rem;
  color: var(--window-text-color);

  /* font-family: ; */
}

#blink-cursor {
  animation: blink 1s infinite;
  /* make the blink cursor in typing text */
}
@keyframes blink {
  0% {
    opacity: 100%;
  }
  50% {
    opacity: 100%;
  }
  51% {
    opacity: 0%;
  }
  100% {
    opacity: 0%;
  }
}

/* ---------------------------------------------------------------- */
/* BG track icon */
#bg-track-container {
  position: fixed;
  right: 80px;
  top: 320px;
  z-index: -2;
  /* icon sit behind soundboard when screen is small */

  cursor: pointer;
}

#bg-track-container:hover {
  scale: 90%;
}

/*=====================================================================
/*GRID ARRANGEMENT - define each space each box inside grid takes*/
/* grid: Starting number/Ending number+1 */
#box1 {
  grid-column: 1;
  grid-row: 1/5;
}
#box2 {
  grid-column: 2/4;
  grid-row: 1;
}
#box3 {
  grid-column: 2/4;
  grid-row: 2;
}
#box4 {
  grid-column: 4;
  grid-row: 1;
}
#box5 {
  grid-column: 4;
  grid-row: 2/4;
}
#box6 {
  grid-column: 5;
  grid-row: 1/4;
}
#box7 {
  grid-column: 2/4;
  grid-row: 3/6;
}
#box8 {
  grid-column: 1;
  grid-row: 5/8;
}
#box9 {
  grid-column: 2;
  grid-row: 6/9;
}
#box10 {
  grid-column: 3;
  grid-row: 6;
}
#box11 {
  grid-column: 3;
  grid-row: 7;
}
#box12 {
  grid-column: 4/6;
  grid-row: 4/8;
}
#box13 {
  grid-column: 1;
  grid-row: 8;
}
#box14 {
  grid-column: 1/3;
  grid-row: 9/13;
}
#box15 {
  grid-column: 3/6;
  grid-row: 8/11;
}
#box16 {
  grid-column: 3;
  grid-row: 11/15;
}
#box17 {
  grid-column: 4;
  grid-row: 11/15;
}
#box18 {
  grid-column: 5;
  grid-row: 11/13;
}
#box19 {
  grid-column: 1;
  grid-row: 13;
}
#box20 {
  grid-column: 2;
  grid-row: 13;
}
#box21 {
  grid-column: 1/3;
  grid-row: 14;
}
#box22 {
  grid-column: 5;
  grid-row: 13;
}
#box23 {
  grid-column: 1/4;
  grid-row: 15/18;
}
#box24 {
  grid-column: 4;
  grid-row: 15/18;
}
#box25 {
  grid-column: 5;
  grid-row: 14/17;
}
#box26 {
  grid-column: 5;
  grid-row: 17;
}
#box27 {
  grid-column: 1;
  grid-row: 18/20;
}
#box28 {
  grid-column: 2;
  grid-row: 18/20;
}
#box29 {
  grid-column: 3/6;
  grid-row: 18/20;
}
