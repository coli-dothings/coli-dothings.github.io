/* ====================================================================
DESIGN THEORY
Early internet maximalist content and minimalist composition
Main body content
Text box interactive
BG muisc
=======================================================================
TYPOGRAPHY
=======================================================================
COLOR PALLETE
Define all colors in root. accent is on hover color
======================================================================*/

:root {
  --bg-color: rgb(14, 15, 18);
  --text-color: rgb(217, 217, 217);
  --window-text-color: black;
  --accent-color: darkslateblue;
}

body {
  max-width: 1200px;
  background-color: var(--bg-color);
  color: var(--text-color);
  font-family: "VT323", monospace;
  font-weight: 400;
  font-style: normal;
}

main {
  display: flex;
}

/*------------------------------------------------------------------*/
/*Title and flavor text styling*/
#title-container {
  width: 220px;
  padding: 15px; /* padding is inside, margin outside*/
  background-color: var(--bg-color);
}

/* horizontal line dividing text sections*/
.line {
  width: 100%;
  height: 2px;
  background-color: var(--text-color);
  margin-top: 20px;
  margin-bottom: 20px;
}

h1 {
  font-family: "Six Caps", sans-serif;
  font-weight: 400;
  font-style: normal;
  font-size: 8rem;
  line-height: 1;
  padding-top: 10px;
  padding-bottom: 10px;
}

h2,
p {
  font-family: "Pathway Gothic One", sans-serif;
  font-weight: 400;
  font-style: normal;
  line-height: 1.3;
}

h2 {
  font-size: 1.3rem;
  padding-bottom: 8px;
}

footer p {
  font-family: "VT323", sans-serif;
}

/* Small idle shuffling animation to match the visual style */
h1,
h2,
p {
  animation: text-shuffle 1s infinite;
}
@keyframes text-shuffle {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(0px);
  }
  51% {
    transform: translateY(1px);
  }
  100% {
    transform: translateY(1px);
  }
}

/*----------------------------------------------------------------*/
/*Soundboard grid styling*/
#soundboard-container {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(19, 1fr);
  min-width: 600px;
  min-height: auto;
  aspect-ratio: 60 / 228;
  /*aspect ratio maintain consistent square size of grid*/

  gap: 2px;
  background-color: var(--text-color);
  /*bg-color and gap to create lines running between grid box*/
}

.box-maingrid {
  background-color: var(--bg-color);
  padding: 2px;
  position: relative;
  /*Allow content stacking inside using absolute*/
}

.box-maingrid:hover {
  background-color: var(--accent-color);
  cursor: pointer;
}

.icon {
  width: 100%;
  height: 100%;
  background-size: 100%;
  background-repeat: no-repeat;
  /* keep the GIF original size, non repeat */
}

/* Setting the background for all icons of same type */
/* All base idle animations */
.i1x1b {
  background-image: url(1x1\ black.gif);
}
.i1x1 {
  background-image: url(1x1.gif);
}
.i1x2 {
  background-image: url(1x2.gif);
}
.i1x2sw {
  background-image: url(1x2sw.gif);
}
.i1x3 {
  background-image: url(1x3.gif);
}
.i1x4 {
  background-image: url(1x4.gif);
}
.i2x3 {
  background-image: url(2x3.gif);
}
.i2x3sw {
  background-image: url(2x3sw.gif);
}
.i2x4 {
  background-image: url(2x4.gif);
}
.i3x3 {
  background-image: url(3x3.gif);
}
/* ==============================================================
ICON CLASS specific animation 

Using GIF allow the background to be transparent, however, unlike
MP4(video), GIF, as an image class, does not specify start and end point.

This means to play an animation once (e.g. animation fire on click)
I need to use a transparent PNG spritemap containing all
frames of animation, and animate manually using CSS to control its
speed, start and end. 
Use JS 'animationed' Event to know when animation is finished.
Similar to 'ended' when using video.
==================================================================*/

.i1x1-idle {
  background-image: url();
  background-size: null;
  /* set BG size to 100% times the number of frames. This makes each
  frame fill the exact size of div */
  /* The default BG size is 100% - see above code (line-130) */
  animation: animateframe steps(null) null;
  /* Use CSS animation to slide each frame into place. Use steps to 
  jump from frame to frame (remove smooth). 
  steps(num) = total frames - 1 */
}

@keyframes animateframe {
  0% {
    background-position: 0%;
  }
  100% {
    background-position: 100%;
  }
}

/* ------------------------------------------------------------------- */
/*Window text box styling*/
#textbox-container {
  width: 400px;
  height: 300px;
  background-image: url(window.gif);

  position: fixed;
  right: 80px;
  top: 20px;
  padding: 30px;
  padding-top: 70px;
  z-index: -1;
}
#close-window-btn {
  position: fixed;
  right: 90px;
  top: 30px;
  cursor: pointer;
}

#close-icon-img {
  position: relative;
  z-index: 9;
}
#close-icon-bg {
  position: fixed;
  right: 95px;
  top: 36px;
  width: 26px;
  height: 24px;
  z-index: 8;
}
/* creating a seperate div allow the bg color to turn red on hover
using CSS, while keeping the animated GIF icon */
#close-window-btn:hover #close-icon-bg {
  background-color: rgb(206, 0, 0);
}
#close-window-btn:active #close-icon-img {
  scale: 90%;
}

.text-cursor {
  font-family: "VT323", monospace;
  font-size: 1.2rem;
  color: var(--window-text-color);

  /* font-family: ; */
}

#blink-cursor {
  animation: blink 1s infinite;
  /* make the blink cursor in typing text */
}
@keyframes blink {
  0% {
    opacity: 100%;
  }
  50% {
    opacity: 100%;
  }
  51% {
    opacity: 0%;
  }
  100% {
    opacity: 0%;
  }
}

/*=====================================================================
/*GRID ARRANGEMENT - define each space each box inside grid takes*/
/* grid: Starting number/Ending number+1 */
#box1 {
  grid-column: 1;
  grid-row: 1/5;
}
#box2 {
  grid-column: 2/4;
  grid-row: 1;
}
#box3 {
  grid-column: 2/4;
  grid-row: 2;
}
#box4 {
  grid-column: 4;
  grid-row: 1;
}
#box5 {
  grid-column: 4;
  grid-row: 2/4;
}
#box6 {
  grid-column: 5;
  grid-row: 1/4;
}
#box7 {
  grid-column: 2/4;
  grid-row: 3/6;
}
#box8 {
  grid-column: 1;
  grid-row: 5/8;
}
#box9 {
  grid-column: 2;
  grid-row: 6/9;
}
#box10 {
  grid-column: 3;
  grid-row: 6;
}
#box11 {
  grid-column: 3;
  grid-row: 7;
}
#box12 {
  grid-column: 4/6;
  grid-row: 4/8;
}
#box13 {
  grid-column: 1;
  grid-row: 8;
}
#box14 {
  grid-column: 1/3;
  grid-row: 9/13;
}
#box15 {
  grid-column: 3/6;
  grid-row: 8/11;
}
#box16 {
  grid-column: 3;
  grid-row: 11/15;
}
#box17 {
  grid-column: 4;
  grid-row: 11/15;
}
#box18 {
  grid-column: 5;
  grid-row: 11/13;
}
#box19 {
  grid-column: 1;
  grid-row: 13;
}
#box20 {
  grid-column: 2;
  grid-row: 13;
}
#box21 {
  grid-column: 1/3;
  grid-row: 14;
}
#box22 {
  grid-column: 5;
  grid-row: 13;
}
#box23 {
  grid-column: 1/4;
  grid-row: 15/18;
}
#box24 {
  grid-column: 4;
  grid-row: 15/18;
}
#box25 {
  grid-column: 5;
  grid-row: 14/17;
}
#box26 {
  grid-column: 5;
  grid-row: 17;
}
#box27 {
  grid-column: 1;
  grid-row: 18/20;
}
#box28 {
  grid-column: 2;
  grid-row: 18/20;
}
#box29 {
  grid-column: 3/6;
  grid-row: 18/20;
}
